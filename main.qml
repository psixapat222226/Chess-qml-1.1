import QtQuick 2.15
import QtQuick.Window 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15


Window {
    id: root
    visible: true
    width: 800
    height: 650
    title: "Chess Game"

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    MainMenu {
        id: mainMenu
        width: parent.width
        height: parent.height
    }

    // –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ)
    SettingsWindow {
        id: settingsWindow
        visible: false
        width: parent.width
        height: parent.height
    }
}
/*
Window {
    id: root
    width: 800
    height: 650
    visible: true
    title: "–®–∞—Ö–º–∞—Ç—ã"

    property int boardMargin: 20
    property int boardSize: Math.min(width, height - 50) - (2 * boardMargin)
    property int cellSize: boardSize / 8
    property var selectedPiece: null
    property bool inMenu: true

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ
    function logicalToVisualPos(x, y) {
        return {
            x: x * cellSize,
            y: (7 - y) * cellSize
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ
    function visualToLogicalPos(x, y) {
        return {
            x: Math.floor(x / cellSize),
            y: 7 - Math.floor(y / cellSize)
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä
    function clearAllSelections() {
        moveIndicators.visible = false
        if (selectedPiece !== null) {
            selectedPiece.highlighted = false
        }
        selectedPiece = null
    }

    // –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
    Rectangle {
        id: menuScreen
        anchors.fill: parent
        visible: inMenu

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω
        Image {
            anchors.fill: parent
            source: "../resources/images/fon.png"  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            fillMode: Image.PreserveAspectCrop       // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ª–∏—à–Ω–µ–µ
        }

        Rectangle {

            width: 400
            height: 520
            color: "white"
            radius: 10
            border.color: "#CCCCCC"
            border.width: 1
            anchors.centerIn: parent

            ColumnLayout {
                anchors.centerIn: parent
                spacing: 25
                width: parent.width - 40

                Text {
                    text: "–®–∞—Ö–º–∞—Ç—ã"
                    font.pixelSize: 32
                    font.bold: true
                    Layout.alignment: Qt.AlignHCenter
                }

                Text {
                    text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã"
                    font.pixelSize: 18
                    Layout.alignment: Qt.AlignHCenter
                }

                Button {
                    text: "–ò–≥—Ä–∞ –Ω–∞ –¥–≤–æ–∏—Ö"
                    Layout.preferredHeight: 60
                    Layout.fillWidth: true
                    font.pixelSize: 16

                    onClicked: {
                        chessEngine.setGameMode("twoPlayers")
                        chessEngine.startNewGame()
                        inMenu = false
                    }
                }

                // –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 220
                    color: "#F8F8F8"
                    radius: 10
                    border.color: "#E0E0E0"
                    border.width: 1

                    ColumnLayout {
                        anchors.fill: parent
                        anchors.margins: 15
                        spacing: 15

                        Text {
                            text: "–ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
                            font.pixelSize: 18
                            font.bold: true
                            Layout.alignment: Qt.AlignHCenter
                        }

                        Text {
                            text: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:"
                            font.pixelSize: 14
                            Layout.topMargin: 5
                            Layout.alignment: Qt.AlignHCenter
                        }

                        // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                        RowLayout {
                            Layout.fillWidth: true
                            spacing: 10

                            // –õ–µ–≥–∫–∏–π
                            Rectangle {
                                Layout.fillWidth: true
                                Layout.preferredHeight: 80
                                radius: 8
                                color: chessEngine.difficulty === 1 ? "#D4EDDA" : "#F8F9FA"
                                border.color: chessEngine.difficulty === 1 ? "#28A745" : "#DEE2E6"
                                border.width: 2

                                ColumnLayout {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "üôÇ"
                                        font.pixelSize: 24
                                        Layout.alignment: Qt.AlignHCenter
                                    }

                                    Text {
                                        text: "–õ–µ–≥–∫–∏–π"
                                        font.pixelSize: 14
                                        font.bold: chessEngine.difficulty === 1
                                        color: chessEngine.difficulty === 1 ? "#155724" : "#212529"
                                        Layout.alignment: Qt.AlignHCenter
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: chessEngine.difficulty = 1
                                }
                            }

                            // –°—Ä–µ–¥–Ω–∏–π
                            Rectangle {
                                Layout.fillWidth: true
                                Layout.preferredHeight: 80
                                radius: 8
                                color: chessEngine.difficulty === 2 ? "#CCE5FF" : "#F8F9FA"
                                border.color: chessEngine.difficulty === 2 ? "#0D6EFD" : "#DEE2E6"
                                border.width: 2

                                ColumnLayout {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "üòê"
                                        font.pixelSize: 24
                                        Layout.alignment: Qt.AlignHCenter
                                    }

                                    Text {
                                        text: "–°—Ä–µ–¥–Ω–∏–π"
                                        font.pixelSize: 14
                                        font.bold: chessEngine.difficulty === 2
                                        color: chessEngine.difficulty === 2 ? "#084298" : "#212529"
                                        Layout.alignment: Qt.AlignHCenter
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: chessEngine.difficulty = 2
                                }
                            }

                            // –°–ª–æ–∂–Ω—ã–π
                            Rectangle {
                                Layout.fillWidth: true
                                Layout.preferredHeight: 80
                                radius: 8
                                color: chessEngine.difficulty === 3 ? "#F8D7DA" : "#F8F9FA"
                                border.color: chessEngine.difficulty === 3 ? "#DC3545" : "#DEE2E6"
                                border.width: 2

                                ColumnLayout {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "üòà"
                                        font.pixelSize: 24
                                        Layout.alignment: Qt.AlignHCenter
                                    }

                                    Text {
                                        text: "–°–ª–æ–∂–Ω—ã–π"
                                        font.pixelSize: 14
                                        font.bold: chessEngine.difficulty === 3
                                        color: chessEngine.difficulty === 3 ? "#842029" : "#212529"
                                        Layout.alignment: Qt.AlignHCenter
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: chessEngine.difficulty = 3
                                }
                            }
                        }

                        Button {
                            text: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
                            Layout.preferredHeight: 40
                            Layout.fillWidth: true
                            font.pixelSize: 15
                            highlighted: true

                            onClicked: {
                                chessEngine.setGameMode("vsComputer")
                                chessEngine.startNewGame()
                                inMenu = false
                            }
                        }
                    }
                }

                Button {
                    text: "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é"
                    Layout.preferredHeight: 50
                    Layout.fillWidth: true
                    font.pixelSize: 16
                    enabled: chessEngine.getSavedGames().length > 0

                    onClicked: {
                        loadGameDialog.open();
                    }
                }
            }
        }
    }

    // –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    Item {
        anchors.fill: parent
        visible: !inMenu

        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –±–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        component ChessPiece: Image {
            id: piece

            property int pieceX: 0  // –õ–æ–≥–∏—á–µ—Å–∫–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0-7)
            property int pieceY: 0  // –õ–æ–≥–∏—á–µ—Å–∫–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0-7)
            property bool highlighted: false

            // –ù–µ–±–æ–ª—å—à–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
            Rectangle {
                anchors.fill: parent
                color: "yellow"
                opacity: piece.highlighted ? 0.3 : 0
                z: -1
            }

            // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            Component.onCompleted: {
                let pos = logicalToVisualPos(pieceX, pieceY)
                x = pos.x
                y = pos.y
            }

            MouseArea {
                anchors.fill: parent

                onClicked: {
                    // –£–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —ç—Ç–∞ —Ñ–∏–≥—É—Ä–∞ - –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
                    if (selectedPiece === piece) {
                        clearAllSelections()
                        return
                    }

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã
                    clearAllSelections()

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–∞ —Ñ–∏–≥—É—Ä–∞ —Ö–æ–¥–∏—Ç—å
                    let legalMoves = chessEngine.getLegalMovesForPiece(pieceX, pieceY)

                    if (legalMoves.length > 0) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
                        moveIndicators.fromX = pieceX
                        moveIndicators.fromY = pieceY
                        moveIndicators.legalMoves = legalMoves
                        moveIndicators.visible = true

                        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
                        piece.highlighted = true
                        selectedPiece = piece
                    }
                }
            }
        }

        ColumnLayout {
            anchors.fill: parent
            spacing: 10

            RowLayout {
                Layout.alignment: Qt.AlignHCenter
                spacing: 20

                Text {
                    id: statusText
                    text: chessEngine.status
                    font.pixelSize: 18
                }

                Button {
                    text: "–í –º–µ–Ω—é"
                    onClicked: {
                        inMenu = true
                    }
                }
            }

            Item {
                Layout.fillWidth: true
                Layout.fillHeight: true

                Rectangle {
                    id: board
                    anchors.centerIn: parent
                    width: boardSize
                    height: boardSize
                    color: "#FFFFFF"

                    // MouseArea –¥–ª—è —Ñ–æ–Ω–∞ –¥–æ—Å–∫–∏ —á—Ç–æ–±—ã —Å–Ω–∏–º–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø—É—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å
                    MouseArea {
                        anchors.fill: parent
                        z: -1  // –ü–æ–¥ –≤—Å–µ–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
                        onClicked: {
                            clearAllSelections()
                        }
                    }

                    // –†–∏—Å—É–µ–º —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É
                    Grid {
                        anchors.fill: parent
                        rows: 8
                        columns: 8

                        Repeater {
                            model: 64

                            Rectangle {
                                width: cellSize
                                height: cellSize
                                color: {
                                    let row = Math.floor(index / 8)
                                    let col = index % 8
                                    return (row + col) % 2 === 0 ? "#F1D9B5" : "#B98863"
                                }
                            }
                        }
                    }

                    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
                    Item {
                        id: lastMoveHighlight
                        anchors.fill: parent
                        visible: chessEngine.hasLastMove()
                        z: 1  // –ù–∞–¥ –¥–æ—Å–∫–æ–π

                        Rectangle {
                            width: cellSize
                            height: cellSize
                            x: chessEngine.hasLastMove() ? chessEngine.getLastMoveFrom().x * cellSize : 0
                            y: chessEngine.hasLastMove() ? (7 - chessEngine.getLastMoveFrom().y) * cellSize : 0
                            color: "#FFFF0055" // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∂–µ–ª—Ç—ã–π
                            visible: chessEngine.hasLastMove()
                        }

                        Rectangle {
                            width: cellSize
                            height: cellSize
                            x: chessEngine.hasLastMove() ? chessEngine.getLastMoveTo().x * cellSize : 0
                            y: chessEngine.hasLastMove() ? (7 - chessEngine.getLastMoveTo().y) * cellSize : 0
                            color: "#FFFF0055" // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∂–µ–ª—Ç—ã–π
                            visible: chessEngine.hasLastMove()
                        }
                    }

                    // –®–∞—Ö–º–∞—Ç–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
                    Repeater {
                        id: piecesRepeater
                        model: chessEngine.getPieces()

                        ChessPiece {
                            width: cellSize
                            height: cellSize
                            source: resourceManager.getTexturePath(modelData.type)
                            pieceX: modelData.x
                            pieceY: modelData.y
                        }
                    }

                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
                    Item {
                        id: moveIndicators
                        anchors.fill: parent
                        visible: false

                        property var legalMoves: []
                        property int fromX: -1
                        property int fromY: -1

                        Repeater {
                            id: movesRepeater
                            model: moveIndicators.legalMoves

                            Rectangle {
                                property var visualPos: logicalToVisualPos(modelData.x, modelData.y)

                                x: visualPos.x
                                y: visualPos.y
                                width: cellSize
                                height: cellSize
                                color: "transparent"
                                border.width: 3
                                border.color: "#32CD32"
                                radius: cellSize / 2
                                opacity: 0.7

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: {
                                        if (chessEngine.processMove(
                                            moveIndicators.fromX, moveIndicators.fromY,
                                            modelData.x, modelData.y)) {
                                            clearAllSelections()
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
                    Button {
                        id: newGameButton
                        anchors {
                            horizontalCenter: parent.horizontalCenter
                            bottom: parent.bottom
                            bottomMargin: -35
                        }
                        text: "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
                        onClicked: {
                            chessEngine.startNewGame()
                            clearAllSelections()
                        }
                    }
                }
            }

            // –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            RowLayout {
                Layout.alignment: Qt.AlignHCenter
                spacing: 10

                Button {
                    id: saveButton
                    text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—Ç–∏—é"
                    enabled: chessEngine.getSavedGames().length < 3

                    onClicked: {
                        gameNameInput.text = "";
                        saveGameDialog.open();
                    }
                }

                Button {
                    id: loadButton
                    text: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä—Ç–∏—é"
                    enabled: chessEngine.getSavedGames().length > 0

                    onClicked: {
                        loadGameDialog.open();
                    }
                }

                Button {
                    id: undoButton
                    text: "–û—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥"
                    enabled: chessEngine.canUndo()

                    onClicked: {
                        chessEngine.undoLastMove();
                    }
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –¥–≤–∏–∂–∫–∞
    Connections {
        target: chessEngine

        function onGameEnded(result) {
            resultDialog.text = result
            resultDialog.open()
        }

        function onPiecesChanged() {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏
            clearAllSelections()
            piecesRepeater.model = chessEngine.getPieces()
        }

        function onStatusChanged() {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—á–∏—â–∞—é—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
            clearAllSelections()
        }

        function onPawnPromotion(fromX, fromY, toX, toY) {
            promotionDialog.fromX = fromX
            promotionDialog.fromY = fromY
            promotionDialog.toX = toX
            promotionDialog.toY = toY
            promotionDialog.open()
        }

        function onLastMoveChanged() {
            console.log("Last move changed, has move: " + chessEngine.hasLastMove());
            if (chessEngine.hasLastMove()) {
                console.log("From: " + chessEngine.getLastMoveFrom().x + "," + chessEngine.getLastMoveFrom().y);
                console.log("To: " + chessEngine.getLastMoveTo().x + "," + chessEngine.getLastMoveTo().y);
            }
            lastMoveHighlight.visible = chessEngine.hasLastMove()
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        function onDifficultyChanged() {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–∏–≤—è–∑–∫–∞–º
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
        function onSavedGamesChanged() {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            saveButton.enabled = chessEngine.getSavedGames().length < 3
            loadButton.enabled = chessEngine.getSavedGames().length > 0
        }
    }

    Dialog {
        id: resultDialog
        title: "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
        property string text: ""

        Label {
            text: resultDialog.text
            font.pixelSize: 16
        }

        standardButtons: Dialog.Ok

        anchors.centerIn: Overlay.overlay

        onAccepted: {
            close()
        }
    }

    // –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏
    Dialog {
        id: promotionDialog
        title: "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏"
        modal: true
        closePolicy: Dialog.NoAutoClose

        property int fromX: -1
        property int fromY: -1
        property int toX: -1
        property int toY: -1

        anchors.centerIn: Overlay.overlay

        ColumnLayout {
            width: 300
            spacing: 10

            Text {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏:"
                font.pixelSize: 14
                wrapMode: Text.WordWrap
                Layout.fillWidth: true
            }

            RowLayout {
                Layout.alignment: Qt.AlignHCenter
                spacing: 20

                Repeater {
                    model: ["queen", "rook", "bishop", "knight"]

                    delegate: Rectangle {
                        width: 60
                        height: 60
                        color: "#F0F0F0"
                        border.color: "#CCCCCC"
                        border.width: 1

                        Image {
                            anchors.fill: parent
                            anchors.margins: 5
                            source: {
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É (–±–µ–ª—ã–µ –∏–ª–∏ —á–µ—Ä–Ω—ã–µ) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
                                let side = promotionDialog.toY === 7 ? "white" : "black";
                                return resourceManager.getTexturePath(side + modelData.charAt(0).toUpperCase() + modelData.slice(1));
                            }
                        }

                        MouseArea {
                            anchors.fill: parent
                            onClicked: {
                                let pieceType = modelData;
                                chessEngine.promotePawn(
                                    promotionDialog.fromX,
                                    promotionDialog.fromY,
                                    promotionDialog.toX,
                                    promotionDialog.toY,
                                    pieceType
                                );
                                promotionDialog.close();
                            }
                        }
                    }
                }
            }
        }
    }

    // –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏
    Dialog {
        id: saveGameDialog
        title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"
        modal: true
        anchors.centerIn: Overlay.overlay
        standardButtons: Dialog.Save | Dialog.Cancel

        property bool canSave: gameNameInput.text.trim().length > 0

        onAccepted: {
            if (canSave) {
                chessEngine.saveGame(gameNameInput.text.trim());
            }
        }

        ColumnLayout {
            width: 300
            spacing: 10

            Text {
                text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:"
                font.pixelSize: 14
            }

            TextField {
                id: gameNameInput
                Layout.fillWidth: true
                placeholderText: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"
                selectByMouse: true
                onTextChanged: {
                    saveGameDialog.canSave = text.trim().length > 0
                }
            }

            Text {
                text: "–ú–∞–∫—Å–∏–º—É–º 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –º–µ–Ω—å—à–µ 3-—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π."
                font.pixelSize: 12
                wrapMode: Text.WordWrap
                Layout.fillWidth: true
                color: "#666"
            }
        }
    }

    // –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–∏–∏
    Dialog {
        id: loadGameDialog
        title: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"
        modal: true
        anchors.centerIn: Overlay.overlay
        standardButtons: Dialog.Close
        width: 450

        ColumnLayout {
            width: 400
            spacing: 15

            Text {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"
                font.pixelSize: 14
            }

            ListView {
                id: savedGamesList
                Layout.fillWidth: true
                Layout.preferredHeight: 200
                clip: true
                model: chessEngine.getSavedGames()
                delegate: Rectangle {
                    width: savedGamesList.width
                    height: 80
                    color: index % 2 === 0 ? "#f5f5f5" : "#ffffff"
                    border.color: "#e0e0e0"
                    border.width: 1

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                        Column {
                            Layout.fillWidth: true
                            spacing: 4

                            Text {
                                text: modelData.name
                                font.bold: true
                                font.pixelSize: 14
                            }

                            Text {
                                text: "–î–∞—Ç–∞: " + modelData.date
                                font.pixelSize: 12
                                color: "#666"
                            }

                            Text {
                                text: "–†–µ–∂–∏–º: " + (modelData.gameMode === "twoPlayers" ? "–ò–≥—Ä–∞ –Ω–∞ –¥–≤–æ–∏—Ö" : "–ü—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞") +
                                      (modelData.gameMode === "vsComputer" ? " (–°–ª–æ–∂–Ω–æ—Å—Ç—å: " +
                                      (modelData.difficulty === 1 ? "–õ–µ–≥–∫–∏–π" :
                                       modelData.difficulty === 2 ? "–°—Ä–µ–¥–Ω–∏–π" : "–°–ª–æ–∂–Ω—ã–π") + ")" : "")
                                font.pixelSize: 12
                                color: "#666"
                            }

                            Text {
                                text: "–°—Ç–∞—Ç—É—Å: " + modelData.status
                                font.pixelSize: 12
                                color: "#666"
                            }
                        }

                        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        Column {
                            spacing: 6

                            Button {
                                text: "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
                                width: 100
                                onClicked: {
                                    chessEngine.loadGame(modelData.slot);
                                    loadGameDialog.close();
                                    inMenu = false; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
                                }
                            }

                            Button {
                                text: "–£–¥–∞–ª–∏—Ç—å"
                                width: 100
                                onClicked: {
                                    deleteConfirmDialog.slotToDelete = modelData.slot;
                                    deleteConfirmDialog.gameName = modelData.name;
                                    deleteConfirmDialog.open();
                                }
                            }
                        }
                    }
                }
            }

            Text {
                text: savedGamesList.model.length === 0 ? "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π." : ""
                font.pixelSize: 14
                color: "#666"
                Layout.alignment: Qt.AlignHCenter
                visible: savedGamesList.model.length === 0
            }
        }

        Connections {
            target: chessEngine
            function onSavedGamesChanged() {
                savedGamesList.model = chessEngine.getSavedGames();
            }
        }
    }

    // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    Dialog {
        id: deleteConfirmDialog
        title: "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        modal: true
        anchors.centerIn: Overlay.overlay
        standardButtons: Dialog.Yes | Dialog.No

        property int slotToDelete: -1
        property string gameName: ""

        onAccepted: {
            if (slotToDelete >= 0) {
                chessEngine.deleteGame(slotToDelete);
            }
        }

        Text {
            text: "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ \"" + deleteConfirmDialog.gameName + "\"?"
            font.pixelSize: 14
            wrapMode: Text.WordWrap
            width: 300
        }
    }
}
*/
